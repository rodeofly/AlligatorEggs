// Generated by CoffeeScript 1.9.0
(function() {
  var ALPHABET, CSS_COLOR_NAMES, EXERCICES, FUNCTION, ahead_vars, color_tab, debug, delay, delta, id, infobox, interval, tags, var_tab, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  interval = function(ms, func) {
    return setInterval(func, ms);
  };

  _ref = [[], [], {}, false, false, true, 0, 550], color_tab = _ref[0], ahead_vars = _ref[1], var_tab = _ref[2], debug = _ref[3], infobox = _ref[4], tags = _ref[5], id = _ref[6], delta = _ref[7];

  ALPHABET = "abcdefghijklmnopqrstuvwxyz?";

  CSS_COLOR_NAMES = ["Blue", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "Yellow", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGrey", "DeepPink", "White", "DimGray", "DimGrey", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Grey", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGray", "LightGrey", "LightGreen", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSlateGrey", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "Red", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "SlateGrey", "Snow", "SpringGreen", "SteelBlue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "YellowGreen"];

  FUNCTION = {
    "ZERO": "(λf.λx.x)",
    "ONE": "(λf.λx.(f x))",
    "TWO": "(λf.λx.(f(f x)))",
    "THREE": "(λf.λx.(f(f(f x))))",
    "FOUR": "(λf.λx.(f(f(f(f x)))))",
    "FIVE": "(λf.λx.(f(f(f(f(f x))))))",
    "SUCC": "(λn.λf.λx.f (n f x))",
    "PLUS": "(λm.λn.λf.λx.m f (n f x))",
    "MULT": "(λm.λn.λf.m (n f))",
    "POW": "(λb.λe.e b)",
    "PRED": "(λa.λf.λx.a (λg.λh.h (g f)) (λu.x) (λu.u))",
    "SUB": "(λm.λa. (a  (λn.λf.λx. n (λg.λh.h (g f)) (λu.x) (λu.u))) m)",
    "TRUE": "(λa.λb.a)",
    "FALSE": "(λa.λb.b)",
    "AND": "(λp.λq.p q p)",
    "OR": "(λp.λq.p p q)",
    "NOT": "(λp.λa.λb.p b a)",
    "IF": "(λp.λa.λb.p a b)",
    "ISZERO": "(λn.n (λx.(λa.λb.b)) (λa.λb.a))",
    "LEQ": "(λc.λp. (λq.q (λx.(λd.λe.e)) (λd.λe.d)) ((λm.λa. (a  (λn.λf.λx. n (λg.λh.h (g f)) (λu.x) (λu.u))) m) c p))",
    "Y": "(λr. ((λf.λg.λx. (f g g) x) r) ((λf.λg.λx. (f g g) x) r))",
    "PAIR": "(λx.λy.λz.z x y)",
    "FIRST": "(λp.p (λx.λy.x))",
    "SECOND": "(λp.p (λx.λy.y))",
    "NIL": "((λx.λy.λz.z x y) (λa.λb.a) (λa.λb.a))",
    "ISNIL": "(λp.p (λx.λy.x))",
    "CONS": "(λh.λt. (λx.λy.λz.z x y) (λa.λb.b) ((λx.λy.λz.z x y) h t))",
    "HEAD": "(λz. (λp.p (λx.λy.x)) ((λp.p (λx.λy.y)) z))",
    "TAIL": "(λz. (λp.p (λx.λy.y)) ((λp.p (λx.λy.y)) z))"
  };

  EXERCICES = {
    "a": {
      "titre": 'Les items : "Le vieil alligator & les œufs"',
      "texte": "<p>Voilà un vieil alligator avec des œufs ! Le vieil alligator n'a plus faim, il a assez mangé.</p><p>Tous ce qu'il fait, c'est prendre soin de sa famille : ici ce sont des œufs et un autre vieil alligator qui garde deux oeufs!</p><p>Les œufs vont éclore et donner de nouvelles familles d'alligators.</p><p>Fais glisser un vieil alligator dans le panel, puis fais glisser le premier œuf sur le bout de la queue. Enfin, un à un, glisse des œufs et le vieil alligator les uns sur les autres pour les ajouter !</p>",
      "contenu-exercice": "(f g h (i i) )",
      "contenu-eleve": "(?)",
      "compte-rendu": "()",
      "solution": "(f g h (i i) ) "
    },
    "b": {
      "titre": 'Les items : "Les alligators affamés"',
      "texte": "<p>Voilà des alligators affamés...Les alligators affamés sont voraces. Ils vont manger tout ce qui est en devant eux (au point de mourir d'indigestion)! Mais ils sont aussi des alligators responsables, et comme les vieux alligators, ils gardent leurs familles.</p><p>Allez fais glisser !</p>",
      "contenu-exercice": "λx.(λy.(λz.() ) ) ",
      "contenu-eleve": "λx.()",
      "compte-rendu": "λ?",
      "solution": "λx.(λy.(λz.() ) ) "
    },
    "c": {
      "titre": 'Les familles (1)',
      "texte": "<p>Voici une petite famille : un alligator garde son œuf !</p><p>Peux tu la recréer ?</p>",
      "contenu-exercice": "λe.e",
      "contenu-eleve": "",
      "compte-rendu": "λ?",
      "solution": "λe.(e ) "
    },
    "d": {
      "titre": 'Les familles (2)',
      "texte": "<p>Voici une petite famille un peu plus grande.</p><p>Un alligator garde un autre alligator qui garde deux œufs. Ou on peut dire qu'un alligator garde un autre alligator qui est gardien des deux œufs.</p><p>Peux tu la recréer ?</p>",
      "contenu-exercice": "λe.λf.e f",
      "contenu-eleve": "",
      "compte-rendu": "λ?",
      "solution": "λe.(λf.(e f ) ) "
    },
    "e": {
      "titre": 'Les familles (3)',
      "texte": "<p>Voici une grande famille ! Nous avons un alligator jaune, un vert et un rose qui gardent cette famille. Ils gardent trois choses : un œuf vert, un vieux crocodile , et un œuf rose. Le vieil alligator, lui, garde un œuf jaune et un œuf vert.</p><p>Note bien que les œufs n'utilisent que les couleurs des alligators qui les surveillent . On ne peut pas avoir un œuf bleu sans qu'il y ait un alligator bleu au-dessus pour le garder.</p><p>Peux recréer cette famille ?</p>",
      "contenu-exercice": "λh.λe.λg.(e (h e) g)",
      "contenu-eleve": "λh.λe.λg.?",
      "compte-rendu": "λ?. ",
      "solution": "λh.(λe.(λg.(e (h e ) g ) ) ) "
    },
    "f": {
      "titre": 'Manger',
      "texte": "<p>Attention, ça va se compliquer !</p><p>Voici deux familles, l'une à coté de l'autre. L'alligator vert est affamé, et il y a cette famille jaune juste en face de lui... Comme elle semble appétissante! La suite, tu la connais ?! Appuye sur le bouton (&#9658;).</p><p>Malheureusement , les yeux du crocodile vert étaient plus grands que son ventre. Il trop a mangé ! En mourant, il s'en va au paradis des alligator (ouf !). Mais, l'histoire ne se arrête pas là ; parce qu'une fois l'alligator vert mort, l'oeuf vert commence à éclore... Et étonnamment, il éclot exactement en ce que l'alligator vert avait mangé. C'est le miracle de la vie ! Maintenant, nous avons une nouvelle famille: un crocodile rouge gardant un alligator jaune et un oeuf rouge, et l'alligator jaune qui garde son œuf jaune. Mais cet alligator jaune à faim , et il y a un bel œuf rouge en face de lui. On y va encore une fois (&#9658;).</p><p>Pauvre alligator. Même un seul œuf est trop gros pour son estomac! L'alligator jaune meurt... mais encore une fois , l'œuf jaune commence à éclore ...Et il éclot dans exactement ce que l'alligator jaune avait mangé !</p><p>Maintenant, il n'y a plus rien pour quiconque à manger, donc nous pouvons arrêter là.</p>",
      "contenu-exercice": "λe.(λf.(e f ) ) λh.(h ) ",
      "contenu-eleve": "",
      "solution": "",
      "animation": "yes"
    },
    "g": {
      "titre": 'La règle du "je te mange"',
      "texte": "<p>La règle de l'alimentation dit que s'il y a des familles côte-à-côté, l'alligator le plus en haut à gauche de la famille mange à sa droite.Puis , ce crocodile meurt . Mais si il gardait des oeufs de la même couleur que lui, chacun de ces oeufs va éclorent en ce qu'il a mangé</p>.<p>En continuant, l'alligator orange, mange la famille jaune. Ensuite, l'alligator vert en haut à gauche veut manger la famille à sa droite. Mais avant qu'elle ne puisse le faire , nous devons nous pencher sur la règle de couleur !</p><p>La règle de couleur dit que si un alligator est sur ​​le point de manger une famille, et que s'il y a une couleur qui apparaît dans les deux familles, nous devons changer cette couleur dans une famille avec une autre couleur. Ici, vert et rouge apparaissent à la fois la première et la seconde famille. Le changement de couleur est automatique. Une fois qu'ils ne partagent plus les mêmes couleurs, nous pouvons manger! Et manger!Et manger! Et manger, jusqu'à ce qu'il n'y ai rien de plus qui puisse être mangé .</p>",
      "contenu-exercice": "λz.(λe.(z z e ) ) λe.(λf.(e f ) ) λh.(h ) ",
      "contenu-eleve": "",
      "solution": "",
      "animation": "yes"
    },
    "h": {
      "titre": 'La règle du vieil alligator',
      "texte": "<p>Il ne reste plus qu'une seule règle dans ce jeu, et elle est en lien avec les vieux alligators :</p> <p>L'alligator supérieur gauche ici n'a pas faim. Il ne va rien manger du tout. Tout ce dont il se soucie est sa famille. Alors, comment meurt-il?</p> <p>Il meurt quand il garde seulement une seule chose. À l'heure actuelle, Il est à la fois gardien d'une famille verte et d'une famille rouge. Ils ont besoin de lui pour prendre soin d'eux. Mais l'alligator vert a faim: il mange la famille rouge ...</p> <p>Maintenant , le vieux crocodile ne garde plus qu'une seule famille. Cette famille peut prendre soin d'elle-même. Il n'est par conséquent plus nécessaire. Donc , il vieillit et meurt: C'est la vieille règle de l'âge!</p> <p>Lorsque un vieux crocodile est juste gardait une seule chose , il meurt.</p><p>Pour finir, l'alligator rouge mange la famille jaune, et il ne reste plus rien qui puisse être mangé.</p>",
      "contenu-exercice": "(λe.(e ) λf.(f ) ) λe.(e ) ",
      "contenu-eleve": "",
      "solution": "",
      "animation": "yes"
    },
    "i": {
      "titre": 'Challenge !',
      "texte": "<p>Voici deux familles. Elles s'appellent «Vrai» et «Faux» :</p><insert λe.(λf.(e ) ) λe.(λf.(f ) ) ><p>Et ici, une famille appelée «Non» : <insert λh.(h λe.(λf.( ? ) ) λe.(λf.( ? ) ) ) ></p><p>Lorsque «Non» mange «Vrai», il produit «Faux». Et lorsque «Non» mange «Faux», il produit «Vrai». De quelles couleurs devraient être les deux œufs?</p>",
      "contenu-exercice": "",
      "contenu-eleve": "λh.(h λe.(λf.( ? ) ) λe.(λf.( ? ) ) ) (λe.λf.?) ",
      "compte-rendu": "λh.(h λe.(λf.( ? ) ) λe.(λf.( ? ) ) ) ",
      "solution": "λh.(h λe.(λf.( f ) ) λe.(λf.( e ) ) ) ",
      "parse": "yes"
    }
  };

  $(function() {
    var color, color_rule_check, find_action_pointer, get_lambda_from, go_one_step, help, index, inserer, insert_exp_into_div, key, letter, looping, make_dropped_droppable, preparer_exercice, resize, value, _i, _j, _len, _len1;
    for (index = _i = 0, _len = ALPHABET.length; _i < _len; index = ++_i) {
      letter = ALPHABET[index];
      color_tab.push(CSS_COLOR_NAMES[index]);
      var_tab["" + letter] = CSS_COLOR_NAMES[index];
    }
    for (key in EXERCICES) {
      $("#exercices").append("<option value='" + key + "'  data-id='" + key + "'>Exercice " + key + "</button>");
    }
    for (key in FUNCTION) {
      value = FUNCTION[key];
      $("#console").append("<button id='" + key + "' class='panel-button' data-type='fonction' data-lambda='" + value + "'>" + key + "</button>");
    }
    for (index = _j = 0, _len1 = color_tab.length; _j < _len1; index = ++_j) {
      color = color_tab[index];
      $("#choose-color").append("<option value='" + ALPHABET[index] + "' data-color='" + color + "' data-class='ui-icon-script' >" + ALPHABET[index] + "</option>");
    }
    $("button").button();
    $("#checkboxes, #top-panel-buttons").buttonset();
    $.widget("ui.selectmenu", $.extend({}, $.ui.selectmenu.prototype, {
      _renderItem: function(ul, item) {
        var li, s;
        color = var_tab[item.value];
        li = $("<li>").css("background-color", color);
        s = "position:absolute;top:2%;left:2%;width:96%; height:96%;color:black;background:" + color + ";border-radius:100%;";
        $("<span>", {
          text: item.value,
          style: s
        }).appendTo(li);
        return li.appendTo(ul);
      },
      _renderMenu: function(ul, items) {
        var that;
        that = this;
        return $.each(items, function(index, item) {
          that._renderItemData(ul, item);
          return $("#color").css("background", item.element.attr("data-color")).attr("data-variable", item.value).attr("data-color", item.element.attr("data-color"));
        });
      }
    }));
    $("#choose-color").selectmenu({
      appendTo: "#command-panel",
      open: function() {
        return $("#game-container").addClass("stop-scrolling");
      },
      close: function() {
        return $("#game-container").removeClass("stop-scrolling");
      }
    });
    $("#choose-color").on("selectmenuchange", function(event, ui) {
      var variable, _ref1;
      _ref1 = [ui.item.element.attr("data-color"), ui.item.value], color = _ref1[0], variable = _ref1[1];
      $("#panel-lambda").attr("data-variable", variable).html("λ" + variable);
      $("#panel-variable").attr("data-variable", variable).html("" + variable);
      $("#egg-svg, #open-svg").find(".skin").css("fill", color);
      return $("#color").css("background", color).attr("data-variable", variable).attr("data-color", color);
    });
    $("#exercices").selectmenu({
      appendTo: "#top-panel"
    });
    $("#exercices").on("selectmenuchange", function(event, ui) {
      var i;
      i = ui.item.element.attr("data-id");
      $("#replay").attr("data-id", i);
      return preparer_exercice(i);
    });
    $.get("css/svg/egg.svg", function(rawSvg) {
      $("#egg-svg").append(document.importNode(rawSvg.documentElement, true));
      $("#egg-svg svg")[0].setAttribute('viewBox', '0 0 118 80');
      return $("#choose-color").selectmenu().val("?").selectmenu('refresh');
    }, "xml");
    $.get("css/svg/open.svg", function(rawSvg) {
      $("#open-svg").append(document.importNode(rawSvg.documentElement, true));
      return $("#open-svg svg")[0].setAttribute('viewBox', '0 0 300 124');
    }, "xml");
    $.get("css/svg/vieux.svg", function(rawSvg) {
      $("#vieux-svg").append(document.importNode(rawSvg.documentElement, true));
      return $("#vieux-svg svg")[0].setAttribute('viewBox', '0 0 300 124');
    }, "xml");
    $("#slider-animation").slider({
      range: "max",
      min: 50,
      max: 6000,
      step: 500,
      value: 2000,
      slide: function(event, ui) {
        $("#amount-animation").html(ui.value);
        return delta = ui.value;
      }
    });
    $("#amount-animation").html($("#slider-animation").slider("value"));
    resize = function() {
      var double, s, simple, _ref1;
      value = parseInt($("#amount-zoom").html());
      _ref1 = [value + "px", (2 * value) + "px"], simple = _ref1[0], double = _ref1[1];
      s = ".lambda.priorite.dropped, .lambda.dropped { \n  min-width  : " + double + ";\n  min-height : " + simple + ";\n  padding-top: " + simple + ";\n}\n\n.variable.dropped { \n  width  : " + double + ";\n  height : " + simple + ";\n}\n.lambda.priorite.dropped > svg, .variable.dropped > svg, .lambda.dropped > svg {\n  height : " + simple + ";\n}\n\n.definition_drop, .application_drop {\n  width : " + simple + ";\n  height: " + simple + ";\n}";
      return $("#restyler").text(s);
    };
    $("#slider-zoom").slider({
      range: "max",
      min: 1,
      max: 100,
      step: 1,
      value: 60,
      slide: function(event, ui) {
        $("#amount-zoom").html(ui.value);
        return resize();
      }
    });
    $("#amount-zoom").html($("#slider-zoom").slider("value"));
    $(".item").draggable({
      helper: "clone",
      start: function(event, ui) {
        return $(ui.helper).addClass("ui-draggable-helper");
      },
      stop: function(event, ui) {
        return $(this).show();
      }
    });
    $("#infobox").on("click", function(element) {
      return infobox = $(this).toggle(this.checked).prop("checked");
    });
    $("#tags").on("click", function() {
      tags = $(this).toggle(this.checked).prop("checked");
      if (!tags) {
        return $(".variable.dropped, .lambda.dropped").addClass("hide_pseudo");
      } else {
        return $(".variable.dropped, .lambda.dropped").removeClass("hide_pseudo");
      }
    });
    $("#tags").trigger("click");
    $(".panel-button").on("click", function() {
      var e, parentheses, _k, _len2, _ref1, _results;
      switch ($(this).attr("data-type")) {
        case "lambda":
          return $("#prompt").val($("#prompt").val() + ("λ" + ($(this).attr('data-variable')) + "."));
        case "variable":
          return $("#prompt").val($("#prompt").val() + (" " + ($(this).attr('data-variable')) + " "));
        case "open":
          return $("#prompt").val($("#prompt").val() + "(");
        case "close":
          return $("#prompt").val($("#prompt").val() + ")");
        case "draw":
          e = jQuery.Event("keypress");
          e.which = 13;
          return $('#prompt').trigger(e);
        case "clear":
          parentheses = 0;
          $("#root").empty().append("<div id='root_definition' class='definition_drop'></div>");
          $("#prompt").val("");
          return make_dropped_droppable();
        case "exemple":
          $("#prompt").val(lambda_exemples[$(this).attr("data-numero")]);
          e = jQuery.Event("keypress");
          e.which = 13;
          return $('#prompt').trigger(e);
        case "fonction":
          return $("#prompt").val($("#prompt").val() + " " + $(this).attr("data-lambda"));
        case "autoclose":
          parentheses = 0;
          _ref1 = $("#prompt").val();
          for (index = _k = 0, _len2 = _ref1.length; _k < _len2; index = ++_k) {
            letter = _ref1[index];
            switch (letter) {
              case "(":
                parentheses += 1;
                break;
              case ")":
                parentheses -= 1;
            }
          }
          if (parentheses < 0) {
            return alert("il y a " + parentheses + " parenthese(s) fermée en trop !)");
          } else {
            _results = [];
            while (parentheses > 0) {
              $("#prompt").val($("#prompt").val() + ")");
              _results.push(parentheses -= 1);
            }
            return _results;
          }
          break;
        case "read":
          return $("#prompt").val(get_lambda_from($("#root")));
      }
    });
    $('#prompt').keypress(function(key) {
      if (key.which === 13) {
        return insert_exp_into_div($("#prompt").val(), $("#root"));
      }
    });
    get_lambda_from = function(root) {
      var exp;
      exp = root.clone();
      exp.find("svg, .definition_drop, .application_drop").remove();
      exp = exp.html();
      exp = exp.replace(/<div(?: style="[\w \;\:\-]*")? id="\d*" class="variable[\w \_\-]*" data-variable="([\w\?])" data-color="\w+"(?: style="[\w \;\:\-]*")?>\s*<\/div>/g, "$1 ");
      exp = exp.replace(/<div(?: style="[\w \;\:\-]*")? id="\d*" class="lambda[\w \_\-]*" data-variable="([\w\?])" data-color="\w+"(?: style="[\w \;\:\-]*")?>/g, "λ$1.(");
      exp = exp.replace(/<div(?: style="[\w \;\:\-]*")? id="\d*" class="lambda priorite[\w \_\-]*" data-variable="\(" data-color="white"(?: style="[\w \;\:\-]*")?>/g, "(");
      exp = exp.replace(/<\/div>/g, ") ");
      return exp = exp.replace(/\s{2,}/g, " ");
    };
    insert_exp_into_div = function(exp, root) {
      var current_index, expression, local_debug, parentheses, reg, λ_index, λ_variable;
      expression = exp;
      id = 0;
      expression = expression.replace(/([.( ])(([\w\?]))/g, "$1woot$2");
      local_debug = false;
      while (expression.match(/λ/)) {
        λ_index = 0;
        while (expression[λ_index] !== "λ") {
          λ_index += 1;
        }
        λ_variable = λ_index + 1;
        current_index = λ_index + 3;
        switch (expression[λ_index - 1]) {
          case "(":
            if (local_debug) {
              alert("prototype : (λx. lambda ) = " + expression);
            }
            parentheses = 1;
            while ((parentheses > 0) && (current_index < expression.length) && (expression[current_index] !== "<")) {
              switch (expression[current_index]) {
                case "(":
                  parentheses += 1;
                  break;
                case ")":
                  parentheses -= 1;
              }
              current_index += 1;
            }
            if (local_debug) {
              alert("I got this : " + (expression.substring(λ_index - 1, current_index)));
            }
            expression = expression.replace(expression.substring(λ_index - 1, current_index), "<div id='' class='lambda dropped' data-variable='" + expression[λ_variable] + "' data-color=''>" + (expression.substring(λ_index + 3, current_index - 1)) + "</div>");
            continue;
          default:
            switch (expression[current_index]) {
              case "(":
                if (local_debug) {
                  alert("prototype : λx.(lambda) = " + expression);
                }
                parentheses = 1;
                while ((parentheses > 0) && (current_index < expression.length) && (expression[current_index] !== "<")) {
                  current_index += 1;
                  switch (expression[current_index]) {
                    case "(":
                      parentheses += 1;
                      continue;
                    case ")":
                      parentheses -= 1;
                      continue;
                    default:
                      continue;
                  }
                }
                if (local_debug) {
                  alert("I got this : " + (expression.substring(λ_index, current_index + 1)));
                }
                expression = expression.replace(expression.substring(λ_index, current_index + 1), "<div id='' class='lambda dropped' data-variable='" + expression[λ_variable] + "' data-color=''>" + (expression.substring(λ_index + 4, current_index)) + "</div>");
                continue;
              default:
                if (local_debug) {
                  alert("prototype : λx.lambda = " + expression);
                }
                while ((expression[current_index] !== "<") && (current_index < expression.length)) {
                  current_index += 1;
                }
                if (local_debug) {
                  alert("I got this : " + (expression.substring(λ_index, current_index)));
                }
                expression = expression.replace(expression.substring(λ_index, current_index), "<div id='' class='lambda dropped' data-variable='" + expression[λ_variable] + "' data-color=''>" + (expression.substring(λ_index + 3, current_index)) + "</div>");
                continue;
            }
        }
      }
      expression = expression.replace(/[ ]*\(([^)]*\s?\)*)\)[ ]*/g, "<div id='' class='lambda priorite dropped' data-variable='parenthese' data-color='white' >$1</div>");
      expression = expression.replace(/\(/g, "<div id='' class='lambda priorite dropped' data-variable='parenthese' data-color='white'>");
      expression = expression.replace(/\)/g, "</div>");
      expression = expression.replace(/parenthese/g, "(");
      reg = /woot([\w\?])/g;
      expression = expression.replace(reg, "<div id='' class='variable dropped' data-variable='$1' data-color='' ></div>");
      expression = $('<div/>').html(expression).contents();
      root.empty().append($(expression));
      $(root).find(".dropped").each(function() {
        var variable;
        $(this).attr("id", "" + (id += 1));
        if (($(this).hasClass("lambda")) && ($(this).hasClass("priorite"))) {
          $("#vieux-svg").clone().contents().prependTo($(this));
        } else {
          variable = $(this).attr("data-variable");
          $(this).attr("data-color", "" + var_tab[variable]);
          if ($(this).hasClass("variable")) {
            $("#egg-svg").find(".skin").css("fill", $(this).attr("data-color"));
            $("#egg-svg").clone().contents().prependTo($(this));
          } else {
            $("#open-svg").find(".skin").css("fill", $(this).attr("data-color"));
            $("#open-svg").clone().contents().prependTo($(this));
          }
        }
        if (variable === "?") {
          return $(this).addClass("definition_dropped");
        }
      });
      return make_dropped_droppable();
    };
    inserer = function(draggable, droppable) {
      var lambda, type, variable, _ref1, _ref2;
      if (draggable.hasClass("vieux-croco")) {
        _ref1 = ["(", "white"], variable = _ref1[0], color = _ref1[1];
      } else {
        _ref2 = [$("#color").attr("data-variable"), $("#color").attr("data-color")], variable = _ref2[0], color = _ref2[1];
      }
      if (draggable.hasClass("egg")) {
        type = "variable";
      } else if (draggable.hasClass("croco")) {
        type = "lambda";
      } else {
        type = "lambda priorite";
      }
      lambda = "<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + variable + "' data-color='" + color + "' ><div class='application_drop'></div></div>";
      lambda = $('<div/>').html(lambda).contents();
      if (type !== "variable") {
        $(lambda).prepend("<div class='definition_drop'></div>");
      }
      switch (type) {
        case "variable":
          $("#egg-svg").find(".skin").css("fill", color);
          $("#egg-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda":
          $("#open-svg").find(".skin").css("fill", color);
          $("#open-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda priorite":
          $("#vieux-svg").clone().contents().prependTo($(lambda));
      }
      if (droppable.attr("data-variable") === "?") {
        droppable.find("> svg").remove();
        droppable.after($(lambda));
        return droppable.remove();
      } else {
        if (droppable.hasClass("definition_drop")) {
          droppable.before($(lambda));
        } else {
          droppable.parent().after($(lambda));
        }
        return droppable.remove();
      }
    };
    make_dropped_droppable = function() {
      return $(".application_drop, .definition_drop, [data-variable='?']:not(#color)").droppable({
        hoverClass: "ui-state-hover",
        accept: ".item",
        drop: function(event, ui) {
          inserer(ui.draggable, $(this));
          return make_dropped_droppable();
        }
      });
    };
    make_dropped_droppable();
    looping = false;
    $("#animation").on("click", function(event) {
      event.stopPropagation();
      event.preventDefault();
      return go_one_step("#contenu-exercice");
    });
    $("#stop").click(function() {
      $(".animation").prop("disabled", false);
      looping = false;
      return $("#slider-animation").slider("option", "disabled", false);
    });
    $("#go").on("click", function(event) {
      event.stopPropagation();
      event.preventDefault();
      $(".animation").prop("disabled", true);
      looping = false;
      return go_one_step("#root");
    });
    $("#repeat").on("click", function() {
      $(".animation").prop("disabled", true);
      looping = true;
      return go_one_step("#root");
    });
    $("#help").dialog({
      autoOpen: false,
      dialogClass: "noTitleStuff",
      width: "auto",
      minHeight: 0,
      open: function(event, ui) {
        return delay(1000, function() {
          return $("#help").dialog("close");
        });
      },
      autoResize: true
    });
    help = function(message, element) {
      $("#help").dialog("option", {
        position: {
          my: "left bottom",
          at: "center top",
          of: "#" + element
        }
      });
      $("#help").html(message);
      return $("#help").dialog("open");
    };
    find_action_pointer = function(root) {
      var local_debug, pointer, stay, voisins, _ref1;
      _ref1 = [[], true, false], ahead_vars = _ref1[0], stay = _ref1[1], local_debug = _ref1[2];
      pointer = $(root).children(".lambda:first()");
      while (stay && pointer.length) {
        if (local_debug) {
          alert("stay for a loop with " + (pointer.attr('data-variable')));
        }
        if (pointer.hasClass("priorite")) {
          children(pointer.children(":not(svg)").length);
          if (children === 1) {
            stay = false;
          } else {
            pointer = pointer.children(".lambda:first()");
          }
        } else {
          voisins = pointer.next().length;
          if (voisins > 0) {
            stay = false;
          } else {
            ahead_vars.push(pointer.attr("data-variable"));
            pointer = pointer.children(".lambda").first();
          }
        }
      }
      return pointer;
    };
    color_rule_check = function(pointer) {
      var application, application_vars, function_vars, get_vars, intersect, intersection, item, _ref1;
      application = pointer.next();
      get_vars = function(tree) {
        var palette;
        palette = [];
        tree.find("[data-variable]").andSelf().filter("[data-variable]").not(".lambda.priorite").each(function() {
          return palette.push($(this).attr("data-variable"));
        });
        return palette.unique();
      };
      _ref1 = [get_vars(pointer), get_vars(application)], function_vars = _ref1[0], application_vars = _ref1[1];
      intersect = function(a, b) {
        return a.filter(function(n) {
          return b.indexOf(n) !== -1;
        });
      };
      intersection = intersect(application_vars, function_vars);
      intersection = (function() {
        var _k, _len2, _results;
        _results = [];
        for (_k = 0, _len2 = intersection.length; _k < _len2; _k++) {
          item = intersection[_k];
          if (__indexOf.call(ahead_vars, item) < 0) {
            _results.push(item);
          }
        }
        return _results;
      })();
      return [function_vars, application_vars, intersection];
    };
    go_one_step = function(root, button) {
      var action_croco, local_debug, step1, step2, step3, step4;
      local_debug = false;
      $(".animation").prop("disabled", true);
      $(root + " .application_drop, " + root + " .definition_drop").remove();
      $(root).find(".dropped").each(function(i) {
        if (i == null) {
          i = 0;
        }
        return $(this).attr("id", id += 1);
      });
      step1 = $.Deferred();
      step2 = $.Deferred();
      step3 = $.Deferred();
      step4 = $.Deferred();
      action_croco = find_action_pointer(root);
      if (action_croco.length > 0) {
        step1.resolve(action_croco);
      } else {
        alert("Plus rien à faire !");
      }
      step1.done(function(pointer) {
        if ((pointer.hasClass("priorite")) && (pointer.children(":not(svg)").length < 2)) {
          if (infobox) {
            help("Ce vieil alligator ne sert plus à rien !", pointer.attr("id"));
          }
          return pointer.find("svg").first().find("g#layer1").attr("transform", "rotate(180,140,65)").animate({
            opacity: 0
          }, delta, function() {
            $(this).closest(".lambda.priorite").replaceWith($(this).closest(".lambda.priorite").contents());
            $(this).closest("svg").remove();
            return step2.resolve(pointer);
          });
        } else {
          return step2.resolve(pointer);
        }
      });
      step2.done(function(pointer) {
        var $var, application, application_vars, found, function_vars, intersection, item, n, palette, _k, _len2, _ref1, _results;
        _ref1 = color_rule_check(pointer), function_vars = _ref1[0], application_vars = _ref1[1], intersection = _ref1[2];
        if (intersection.length > 0) {
          application = pointer.next();
          palette = (function() {
            var _k, _len2, _ref2, _results;
            _ref2 = ALPHABET.slice(0, 25);
            _results = [];
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              item = _ref2[_k];
              if (__indexOf.call(function_vars.concat(application_vars), item) < 0) {
                _results.push(item);
              }
            }
            return _results;
          })();
          palette = palette.slice(0, +(intersection.length - 1) + 1 || 9e9);
          _results = [];
          for (index = _k = 0, _len2 = intersection.length; _k < _len2; index = ++_k) {
            $var = intersection[index];
            found = application.find("[data-variable='" + $var + "']").andSelf().filter("[data-variable='" + $var + "']");
            n = found.length;
            found.attr("data-variable", palette[index]);
            _results.push(found.find("> svg").each(function(index2) {
              if (infobox) {
                help("Règle de la couleur", $(this).closest(".dropped").attr("id"));
              }
              $(this).hide().show(delta, function() {
                if (index2 === n - 1) {
                  return step3.resolve(pointer);
                }
              });
              return $(this).find(".skin").css("fill", var_tab[palette[index]]);
            }));
          }
          return _results;
        } else {
          return step3.resolve(pointer);
        }
      });
      step3.done(function(pointer) {
        var application, applicationClone, bust_a_move, j, variable;
        if ((pointer.hasClass("lambda")) && (pointer.attr("data-color") !== "white") && (pointer.next().length > 0)) {
          ahead_vars.pop();
          variable = pointer.attr("data-variable");
          application = pointer.next();
          applicationClone = application.clone();
          if (infobox) {
            help("Manger", pointer.attr("id"));
          }
          j = 0;
          if (delta > 0) {
            bust_a_move = interval(50, function() {
              return pointer.children("svg").css({
                "z-index": "9000"
              }).find("#jaw").attr("transform", "rotate(" + (-10 + Math.floor(6 * Math.cos(j++))) + ") translate(-100,20)");
            });
          }
          application = pointer.next();
          return application.css('visibility', 'hidden').clone().prependTo(pointer).css({
            border: "dashed black 1px",
            visibility: "visible",
            position: "absolute",
            top: "0px",
            left: "100%"
          }).animate({
            "min-width": "0px",
            padding: "0px",
            height: '1vw',
            width: "1vw",
            top: "0",
            left: "60%"
          }, delta, function() {
            $(this).find("> svg").remove();
            $(this).remove();
            application.find("> svg").remove();
            application.remove();
            if (delta > 0) {
              clearInterval(bust_a_move);
            }
            pointer.children("svg").find("g#layer1").attr("transform", "rotate(180 125 75)");
            if (infobox) {
              help("Partir", pointer.attr("id"));
            }
            return pointer.children("svg").animate({
              "opacity": 0
            }, delta, function() {
              $(this).closest("svg").remove();
              return step4.resolve(pointer, applicationClone);
            });
          });
        } else {
          if (looping) {
            return go_one_step(root);
          } else {
            return $(".animation").prop("disabled", false);
          }
        }
      });
      return step4.done(function(pointer, application) {
        var def_clone, def_egg, eggs, n, variable;
        variable = pointer.attr("data-variable");
        if (infobox) {
          help("éclosion", pointer.attr("id"));
        }
        eggs = pointer.find(".variable[data-variable=" + variable + "]");
        n = eggs.length;
        if (n > 0) {
          def_clone = $.Deferred();
          def_egg = $.Deferred();
          eggs.each(function(index, element) {
            $(this).animate({
              opacity: 0
            }, delta, function() {
              $(this).find("> svg").remove();
              $(this).remove();
              if (index === n - 1) {
                return def_egg.resolve();
              }
            });
            return $(this).after(application.clone().css({
              opacity: 0
            }).animate({
              opacity: 1
            }, delta, function() {
              if (index === n - 1) {
                pointer.find("> svg").remove();
                pointer.replaceWith(pointer.contents());
                return def_clone.resolve();
              }
            }));
          });
          return $.when(def_egg, def_clone).done(function() {
            if (looping) {
              return go_one_step(root);
            } else {
              return $(".animation").prop("disabled", false);
            }
          });
        } else {
          if (infobox) {
            help("Aucun oeuf", pointer.attr("id"));
          }
          pointer.find("> svg").remove();
          pointer.replaceWith(pointer.contents());
          if (looping) {
            return go_one_step(root);
          } else {
            return $(".animation").prop("disabled", false);
          }
        }
      });
    };
    $("#console").draggable({
      containment: "#game-container"
    }).toggle();
    $("#command-panel").draggable({
      containment: "#game-container"
    });
    $("#toggle-console").on("click", function() {
      return $("#console").toggle();
    });
    preparer_exercice = function(id) {
      var exo, lambda, reg, texte;
      $(".animation").prop("disabled", false);
      exo = EXERCICES[id];
      $("#replay").attr("data-id", id);
      $("#exercice").attr("data-solution", exo["solution"]);
      $("#exercice").find("> .titre").html("<h1>" + exo['titre'] + "</h1>");
      if (exo["contenu-eleve"] !== "") {
        insert_exp_into_div(exo["contenu-eleve"], $("#root"));
      } else {
        $("#root").empty().append("<div id='root_definition' class='definition_drop'></div>");
      }
      if (exo["contenu-exercice"] !== "") {
        insert_exp_into_div(exo["contenu-exercice"], $("#contenu-exercice"));
      }
      if (exo["animation"] === "yes") {
        $("#animation").show();
      } else {
        $("#animation").hide();
      }
      texte = exo['texte'];
      reg = /<insert ([λ().\w\? ]*)>/;
      while (texte.match(reg)) {
        lambda = reg.exec(texte);
        insert_exp_into_div(lambda[1], $("#exercice-texte"));
        texte = texte.replace(reg, $("#exercice-texte").html());
      }
      $("#exercice-texte").html("<p>" + texte + "</p>");
      if ("compte-rendu" in exo) {
        texte = exo["compte-rendu"];
        insert_exp_into_div(texte, $("#compte-rendu"));
      }
      return $("#exercice").show();
    };
    $("#exercice").hide();
    $("#close-exercice").on("click", function() {
      return $("#exercice").hide();
    });
    $("#replay").on("click", function() {
      return preparer_exercice($(this).attr("data-id"));
    });
    $("#exercice .check").on("click", function() {
      var local_debug, resultat, solution;
      local_debug = true;
      solution = $("#exercice").attr("data-solution");
      resultat = get_lambda_from($("#compte-rendu"));
      if (resultat === solution) {
        return alert("Super ! Si tu as tout compris, passe à l'exo suivant. Sinon rejoue !");
      } else {
        alert("Raté ! Essaye encore, n'oublie pas de cliquer sur 'rejouer'");
        if (local_debug) {
          return alert("[debug soluce : " + solution + " ; eleve : " + resultat + "]");
        }
      }
    });
    $("#theory").toggle();
    $("#toggle-theory").on("click", function() {
      return $("#theory").toggle();
    });
    $("#play").on("click", function() {
      return $("#game-container").dialog("open");
    });
    return $(".run-previous-code").on("click", function() {
      var js;
      js = CoffeeScript.compile($(this).prev(":first").text());
      return eval(js);
    });
  });

}).call(this);
